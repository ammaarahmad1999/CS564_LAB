# -*- coding: utf-8 -*-
"""Hierarchical_Clustering.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zZW0fqzG2vR717NiWIc4HyKyYC815zxN
"""

import pandas as pd
import numpy as np

import math

# Commented out IPython magic to ensure Python compatibility.
# %cp /content/drive/MyDrive/BR_mod.csv ./

df = pd.read_csv("BR_mod.csv")

df

df.columns

df.median()

for column in df.columns:
    df[column].fillna(df[column].median(), inplace=True)

df

data = df.to_numpy()

type(data)

length = data.shape[0]
print(length)

import heapq

def find(clusters, x):
  if (x == clusters[x]):
        return x
  clusters[x] = find(clusters, clusters[x])
  return clusters[x]

def union(clusters, x,y):
  clusters[y] = x

def hierarchial_clustering(k):
  
  distance = []                                           #
  for i, x in enumerate(data):
    for j in range(i+1, length):
      dist = np.linalg.norm(x-data[j])
      distance.append([dist, i, j])
  heapq.heapify(distance)
  clusters = np.arange(0, length, 1)
  count = 0
  while len(distance) > 0:
    dist = heapq.heappop(distance)
    #print(dist)
    d = dist[0]
    x = dist[1]
    y = dist[2]
    #print(dist, x, y)
    par1 = find(clusters, x)
    par2 = find(clusters, y)
    if (par1 == par2):
      print("Cluster already merged")
      continue
    union(clusters, par1, par2)
    count += 1
    print(f"Merging Clusters {par1} and {par2}. No. of clusters = {k}, Count = {count}")
    if (count == 1097-k):
      break
  
  s = set()
  for i in range(length):
    x = find(clusters, i)
    s.add(x)
  l = len(s)
  print(f"No. of clusters formed = {l}")

hierarchial_clustering(2)